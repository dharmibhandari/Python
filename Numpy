Q-1: Create a 1D NumPy array with elements from 1 to 10. 
Ans-1   Code:    import numpy as np 
arr1 = np.array([1,2,3,4,5,6,7,8,9,10]) 
print(arr1)
	Output:  

Q-2: Create a 2D NumPy array with a shape of (3, 4) containing random integers. 
Ans-2   Code:    import numpy as np
array = np.random.randint(10, size=(3, 4))
print(array)
	Output: 
 

Q-3: Perform element-wise addition, subtraction, multiplication, and division on two arrays. 
Ans-3    Code:    import numpy as np
# Generate random integers between 0 and 9 (inclusive)
array1 = np.random.randint(10, size=(3, 4))
array2 = np.random.randint(10, size=(3, 4))

# Element-wise addition
addition = array1 + array2

# Element-wise subtraction
subtraction = array1 - array2

# Element-wise multiplication
multiplication = array1 * array2

# Element-wise division (note: use true division to avoid integer truncation)
division = array1 / array2

# Print the results
print("Array 1:")
print(array1)
print("\nArray 2:")
print(array2)
print("\nElement-wise addition:")
print(addition)
print("\nElement-wise subtraction:")
print(subtraction)
print("\nElement-wise multiplication:")
print(multiplication)
print("\nElement-wise division:")
print(division)

	Output: 
 
 

Q-4: Extract and print the elements at even indices from a 1D array. 
Ans-4   Code:    import numpy as np
array = np.random.randint(10, size=10)
even_elements = array[::2]
print(array)
print("Elements at even indices:", even_elements)
	Output:
 

Q-5: Create a 2-D array 1 3 5 7 9 and 2 4 6 8 10
Ans-5   Code:    import numpy as np 
arr2 = np.array([[1,3,5,7,9],[2,4,6,8,10]]) 
print(arr2)
	Output:
 
â€¢ access the second row of the array 
Code: 	import numpy as np 
arr2 = np.array([[1,3,5,7,9],[2,4,6,8,10]]) 
print(arr2[1])
	Output:
 	
â€¢ access the third column of the array 
Code:	 import numpy as np 
arr2 = np.array([[1,3,5,7,9],[2,4,6,8,10]]) 
print(arr2[: , 2])
	Output:


Q-6: Create a 3D array with shape (2, 3, 4) and access a specific element of the array [1,2,1].
Ans-6   Code:  import numpy as np
array = np.random.randint(10, size=(2, 3, 4))
element = array[1, 2, 1]
print("Element at [1, 2, 1]:", element)
	Output:
 

Q-7: Save one of your created arrays to a text file. 
Ans-7   Code: 	a= np.random.randint(10, size=(2, 3))
print(a)
np.savetxt('my_array.txt',a,delimiter=',')
	Output: 
	 

Q-8: Load the saved array back into a NumPy array. 
Ans-8   Code: 	a= np.random.randint(10, size=(2, 3))
np.save("my_array.npy", a)
loaded_array = np.load('my_array.npy')
	Output:
	 

Q-9: Create a mark sheet for your class . 
Find the percentage of scored by each student.
Find the student with highest percentage and hence scored position 1.
Ans-9   Code: import numpy as np
# Define the number of students and subjects
students = 5
subjects = 5
# Create a 2D array for storing student marks
marks_array = np.zeros((students, subjects), dtype=int)
# Get input for each student's marks and subject names
subject_names = [input(f"Enter name for Subject {j + 1}: ") for j in range(subjects)]
student_names = [input(f"Enter name for Student {i + 1}: ") for i in range(students)]
# Input marks for each student and subject
for i in range(students):
    print(f"\nEnter marks for {student_names[i]}:")
    for j in range(subjects):
        marks_array[i, j] = int(input(f"Enter marks for {subject_names[j]}: "))
# Display the array with subject names and student names
print("\nStudents' Marks:")
print("\t", "\t".join(subject_names))
for i in range(students):
    print(f"{student_names[i]}\t{marks_array[i]}")
# Calculate percentage for each student
total_marks = np.sum(marks_array, axis=1)
percentage = (total_marks / (subjects * 100)) * 100
# Find the student with the highest percentage without using argmax
highest_percentage_index = 0
for i in range(1, students):
    if percentage[i] > percentage[highest_percentage_index]:
        highest_percentage_index = i
# Display the highest percentage with student name
print(f"\n{student_names[highest_percentage_index]} has the highest percentage: {percentage[highest_percentage_index]:.2f}%")
	Output: 
 
 
 
